/*
Copyright (c) 2016 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dlib.text.lexer;

import std.stdio;
import std.algorithm;
import std.ascii;
import std.range.interfaces;

import dlib.core.memory;
import dlib.container.array;
import dlib.text.utf8;

dchar[] copyBuffer(dchar[] b)
{
    auto res = New!(dchar[])(b.length);
    foreach(i, c; b)
        res[i] = c;
    return res;
}

bool buffEq(dchar[] b1, dchar[] b2)
{
    if (b1.length != b2.length)
        return false;
    foreach(i, c; b1)
        if (c != b2[i])
            return false;
    return true;
}

/**
 * General-purpose lexical analyzer.
 * Breaks the input string to a stream of lexemes according to a given dictionary.
 * Assumes UTF-8 input.
 * Treats \r\n as a single \n.
 */
class Lexer: InputRange!(dchar[])
{
    string input;
    string[] delims;
    size_t maxDelimLength = 0;
    UTF8Decoder utf8dec;

    this(string input, string[] delims)
    {
        this.input = input;
        this.delims = delims;
        
        if (delims.length)
        {
            sort!("count(a) < count(b)")(this.delims);
            maxDelimLength = count(delims[$-1]);
        }

        this.utf8dec = UTF8Decoder(input);
    }

    dchar getNextChar()
    {
        return cast(dchar)utf8dec.decodeNext();
    }

    bool eos()
    {
        return utf8dec.eos();
    }

    static bool isWhitespace(dchar c)
    {
        foreach(w; std.ascii.whitespace)
        {
            if (c == w)
            {
                return true;
            }
        }
        return false;
    }

    uint prefixCompare(dchar[] s1, string s2)
    {
        auto dec = UTF8Decoder(s2);
        uint pos = 0;
        foreach(dchar c; s1)
        {
            int g = dec.decodeNext();
            if (g == UTF8_ERROR || g == UTF8_END)
                return pos;

            if (c != cast(dchar)g)
                return pos;

            pos++;
        }

        return pos;
    }

    DynamicArray!dchar tmp;
    DynamicArray!dchar buffer;
    bool fillTmp = true;

    dchar[] getLexeme()
    {
        bool ready = false;
        dchar[] output;

        while(!ready)
        {
            if (eos())
            {
                fillTmp = false;

                if (!tmp.length)
                {

                if (buffer.length)
                {
                    output = copyBuffer(buffer.data);
                    buffer.free();
                    ready = true;
                }

                break;
                }
            }

            if (fillTmp)
            {
                foreach(i; 0..maxDelimLength-tmp.length)
                {
                    int c = getNextChar();
                    
                    if (cast(dchar)c == '\r') // ignore carriage return
                    {
                        continue;
                    }
                    
                    if (cast(dchar)c == '\n')
                    {
                        c = '\n';
                    }
                    else if (isWhitespace(c))
                    {
                        c = ' ';
                    }

                    if (c != UTF8_ERROR && c != UTF8_END)
                        tmp.append(cast(dchar)c);
                    else
                        break;
                }

                if (tmp.length == 0)
                {
                    ready = true;
                    break;
                }
            }
            
            uint pos = 0;
            size_t delimLen = 0;
            string delim;
            foreach(d; delims)
            {
                uint newPos = prefixCompare(tmp.data, d);
                auto co = count(d);
                if (newPos == co)
                {
                    if (newPos > pos)
                    {
                        pos = newPos;
                        delimLen = co;
                        delim = d;
                    }
                }
            }
            
            if (pos && pos == delimLen)
            {
                if (buffer.length)
                {
                    output = copyBuffer(buffer.data);
                    buffer.free();
                    ready = true;
                }
                else
                {
                    output = copyBuffer(tmp.data[0..pos]);
                    tmp.removeLeft(pos);
                    fillTmp = true;
                    ready = true;
                }
            }
            else
            {                        
                buffer.append(tmp.data[0]);
                tmp.removeLeft(1);
                fillTmp = true;
            }
        }

        return output;
    }

    dchar[] _front;

    bool empty()
    {
        return _front.length == 0;
    }

    dchar[] front()
    {
        return _front;
    }

    void popFront()
    {
        _front = getLexeme();
    }

    dchar[] moveFront()
    {
        _front = getLexeme();
        return _front;
    }

    final int opApply(int delegate(dchar[]) dg)
    {
        int result = 0;

        while(true)
        {
            dchar[] lexeme = getLexeme();

            if (!lexeme.length)
                break;

            result = dg(lexeme);
            if (result)
                break;
        }

        return result;
    }

    final int opApply(int delegate(size_t, dchar[]) dg)
    {
        int result = 0;
        size_t i = 0;

        while(true)
        {
            dchar[] lexeme = getLexeme();

            if (!lexeme.length)
                break;

            result = dg(i, lexeme);
            if (result)
                break;

            i++;
        }

        return result;
    }
}

///
unittest
{
    string[] delims = ["(", ")", ";", " ", "{", "}", ".", "\n", "\r", "=", "++", "<"];
    auto input = "for (int i=0; i<arr.length; ++i)\r\n{doThing();}\n";
    auto lexer = new Lexer(input, delims);
    
    import std.utf : toUTF8;
    
    string[] arr;
    while(true) {
        auto lexeme = lexer.getLexeme();
        if(lexeme.length == 0) {
            break;
        }
        arr ~= lexeme.toUTF8;
        Delete(lexeme);
    }
    assert(arr == ["for", " ", "(", "int", " ", "i", "=", "0", ";", " ", "i", "<", "arr", ".", "length", ";", " ", "++", "i", ")", "\n", "{", "doThing", "(", ")", ";", "}", "\n" ]);
    
    input = "";
    lexer = new Lexer(input, delims);
    assert(lexer.getLexeme().length == 0);
}

