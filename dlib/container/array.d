/*
Copyright (c) 2015 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dlib.container.array;

import dlib.core.memory;

/**
 * GC-free dynamic array implementation.
 * Very efficient for small-sized arrays.
 */
struct DynamicArray(T, size_t chunkSize = 32)
{
    T[chunkSize] staticStorage;
    T[] dynamicStorage;
    uint numChunks = 0;
    uint pos = 0;

    /**
     * Get pointer to stored data
     */
    T* storage()
    {
        if (numChunks == 0)
            return staticStorage.ptr;
        else
            return dynamicStorage.ptr;
    }

    void addChunk()
    {
        if (numChunks == 0)
        {
            dynamicStorage = New!(T[])(chunkSize);
        }
        else
        {
            reallocateArray(
                dynamicStorage, 
                dynamicStorage.length + chunkSize);
        }
        numChunks++;
    }
    
    ///
    unittest
    {
        DynamicArray!int arr;
        scope(exit) arr.free();
        
        assert(arr.length == 0);
        arr.addChunk();
        assert(arr.length == 0);
    }

    /**
     * Shift contents of array to the right. 
     * It inreases the size of array by 1.
     * The first element becomes default initialized.
     */
    void shiftRight()
    {
        append(T.init);

        for(uint i = pos-1; i > 0; i--)
        {
            storage[i] = storage[i-1];
        }
    }
    
    ///
    unittest
    {
        DynamicArray!int arr;
        scope(exit) arr.free();
        
        arr.shiftRight();
        assert(arr.length == 1);
        assert(arr[0] == int.init);
        
        arr[0] = 1;
        arr.append([2,3]);
        
        arr.shiftRight();
        assert(arr.length == 4);
        assert(arr[0] == 1);
        assert(arr[1] == 1);
        assert(arr[2] == 2);
        assert(arr[3] == 3);
    }

    /**
     * Shift contents of array to the left by n positions. 
     * Does not change the size of array.
     * n of last elements becomes default initialized.
     */
    void shiftLeft(uint n)
    {
        for(uint i = 0; i < pos; i++)
        {
            if (n + i < pos)
                storage[i] = storage[n + i];
            else
                storage[i] = T.init;
        }
    }
    
    ///
    unittest
    {
        DynamicArray!int arr;
        scope(exit) arr.free();
        
        arr.shiftLeft(1);
        assert(arr.length == 0);
        
        arr.append([1,2,3,4,5]);
        
        arr.shiftLeft(2);
        assert(arr.length == 5);
        assert(arr[0] == 3);
        assert(arr[1] == 4);
        assert(arr[2] == 5);
        assert(arr[3] == int.init);
        assert(arr[4] == int.init);
    }

    /**
     * Append single element c to the end.
     */
    void append(T c)
    {
        if (numChunks == 0)
        {
            staticStorage[pos] = c;
            pos++;
            if (pos == chunkSize)
            {
                addChunk();
                foreach(i, ref v; dynamicStorage)
                    v = staticStorage[i];
            }
        }
        else
        {
            if (pos == dynamicStorage.length)
                addChunk(); 

            dynamicStorage[pos] = c;
            pos++;          
        }
    }
    
    ///
    unittest
    {
        DynamicArray!int arr;
        scope(exit) arr.free();
        
        foreach(i; 0..16) {
            arr.append(i);
        }
        assert(arr.length == 16);
        arr.append(16);
        assert(arr.length == 17);
        assert(arr[16] == 16);
    }

    /**
     * Append element to the start.
     */
    void appendLeft(T c)
    {
        shiftRight();
        storage[0] = c;
    }
    
    ///
    unittest
    {
        DynamicArray!int arr;
        scope(exit) arr.free();
        
        arr.append(1);
        arr.append(2);
        arr.appendLeft(0);
        assert(arr.data == [0,1,2]);
    }

    /**
     * Append all elements of slice s to the end.
     */
    void append(const(T)[] s)
    {
        foreach(c; s)
            append(cast(T)c);
    }
    
    ///
    unittest
    {
        DynamicArray!int arr;
        scope(exit) arr.free();
        
        arr.append([1,2,3,4]);
        assert(arr.data == [1,2,3,4]);
        arr.append([5,6,7,8]);
        assert(arr.data == [1,2,3,4,5,6,7,8]);
    }

    /**
     * Append all elements of slice s to the start.
     */
    void appendLeft(const(T)[] s)
    {
        foreach(c; s)
            appendLeft(cast(T)c);
    }
    
    ///
    unittest
    {
        DynamicArray!int arr;
        scope(exit) arr.free();
        
        arr.appendLeft([1,2,3,4]);
        assert(arr.data == [4,3,2,1]);
        arr.appendLeft([5,6,7,8]);
        assert(arr.data == [8,7,6,5,4,3,2,1]);
    }

    /**
     * Same as append, but in operator form.
     */
    auto opCatAssign(T c)
    {
        append(c);
        return this;
    }
    
    ///
    unittest
    {
        DynamicArray!int arr;
        scope(exit) arr.free();
        
        arr ~= 1;
        arr ~= 2;
        assert(arr.data == [1,2]);
    }

    /**
     * Same as append, but in operator form.
     */
    auto opCatAssign(const(T)[] s)
    {
        append(s);
        return this;
    }
    
    ///
    unittest
    {
        DynamicArray!int arr;
        scope(exit) arr.free();
        
        arr ~= [1,2,3];
        assert(arr.data == [1,2,3]);
    }

    /**
     * Remove n of elements from the end.
     * Returns: number of removed elements.
     */
    uint remove(uint n)
    {
        if (pos == n)
        {
            pos = 0;
            return n;
        }
        else if (pos >= n)
        {
            pos -= n;
            return n;
        }
        else 
        {
            n = pos;
            pos = 0;
            return n;
        }   
    }
    
    ///
    unittest
    {
        DynamicArray!int arr;
        scope(exit) arr.free();
        
        arr.append([1,2,3]);
        assert(arr.remove(3) == 3);
        assert(arr.length == 0);
        
        arr.append([1,2,3,4]);
        assert(arr.remove(2) == 2);
        assert(arr.data == [1,2]);
        
        assert(arr.remove(3) == 2);
        assert(arr.length == 0);
    }

    /**
     * Remove n of elements from the start.
     * Returns: number of removed elements.
     */
    uint removeLeft(uint n)
    {
        if (pos == n)
        {
            pos = 0;
            return n;
        }
        else if (pos > n)
        {
            shiftLeft(n);
            pos -= n;
            return n;
        }
        else
        {
            n = pos;
            pos = 0;
            return n;
        }
    }
    
    ///
    unittest
    {
        DynamicArray!int arr;
        scope(exit) arr.free();
        
        arr.append([1,2,3]);
        assert(arr.removeLeft(3) == 3);
        
        arr.append([1,2,3,4]);
        assert(arr.removeLeft(2) == 2);
        assert(arr.data == [3,4]);
        
        assert(arr.removeLeft(3) == 2);
        assert(arr.length == 0);
    }

    /**
     * Get number of elements in array.
     */
    size_t length()
    {
        return pos;
    }
    
    ///
    unittest
    {
        DynamicArray!int arr;
        scope(exit) arr.free();
        
        arr.append([1,2,3]);
        assert(arr.length == 3);
    }

    /**
     * Get slice of data
     */
    T[] data()
    {
        return storage[0..pos];
    }
    
    ///
    unittest
    {
        DynamicArray!(int,4) arr;
        scope(exit) arr.free();
        
        foreach(i; 0..6) {
            arr.append(i);
        }
        
        assert(arr.data == [0,1,2,3,4,5]);
    }

    /**
     * Access element by index.
     */
    T opIndex(size_t index)
    {
        return data[index];
    }

    /**
     * Set element t for index.
     */
    T opIndexAssign(T t, size_t index)
    {
        data[index] = t;
        return t;
    }

    /**
     * Iterating over array via foreach.
     */
    int opApply(int delegate(size_t i, ref T) dg)
    {
        int result = 0;

        foreach(i, ref v; data)
        {
            result = dg(i, v);
            if (result)
                break;
        }

        return result;
    }
    
    ///
    unittest
    {
        DynamicArray!(int,4) arr;
        scope(exit) arr.free();
        
        int[4] values;
        arr.append([1,2,3,4]);
        foreach(i, ref val; arr) {
            values[i] = val;
        }
        assert(values[] == arr.data);
    }

    /**
     * Iterating over array via foreach.
     */
    int opApply(int delegate(ref T) dg)
    {
        foreach(i, ref v; data)
        {
            dg(v);
        }

        return 0;
    }
    
    ///
    unittest
    {
        DynamicArray!(int,4) arr;
        scope(exit) arr.free();
        
        int[] values;
        arr.append([1,2,3,4]);
        foreach(ref val; arr) {
            values ~= val;
        }
        assert(values[] == arr.data);
    }

    /**
     * Free dynamically allocated memory used by array.
     */
    void free()
    {
        if (dynamicStorage.length)
            Delete(dynamicStorage);
        numChunks = 0;
        pos = 0;
    }
}

void reallocateArray(T)(ref T[] buffer, size_t len)
{
    T[] buffer2 = New!(T[])(len);
    for(uint i = 0; i < buffer2.length; i++)
        if (i < buffer.length)
            buffer2[i] = buffer[i];
    Delete(buffer);
    buffer = buffer2;
}

///
unittest
{
    auto arr = New!(int[])(3);
    arr[0] = 1; arr[1] = 2; arr[2] = 3;
    
    reallocateArray(arr, 2);
    assert(arr.length == 2);
    assert(arr[0] == 1);
    assert(arr[1] == 2);
    
    reallocateArray(arr, 4);
    assert(arr.length == 4);
    assert(arr[0] == 1);
    assert(arr[1] == 2);
}


