/*
Copyright (c) 2015-2016 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dlib.core.memory;

import std.stdio;
import std.conv;
import std.traits;
import std.string;
import core.stdc.stdlib;

/*
 * This module provides a malloc-based memory allocator for classes, structs and arrays.
 * It includes built-in memory profiler that keeps information on allocated objects
 * (such as size, type name, file and line at which it was created).
 */

struct MMListItem
{
    MMListItem* next;
    void* dataPtr;
    size_t size;
    Object obj;
    string typeName;
    string file;
    int line;
}

struct MemoryManager
{
    MMListItem* head;
    MMListItem* tail;
    size_t length = 0;
    size_t allocatedMemory = 0;

    T allocate(T, string file = __FILE__, int line = __LINE__, A...) (A args) if (is(T == class))
    {
        enum size = __traits(classInstanceSize, T);
        void* p = malloc(size);
        auto memory = p[0..size];
        *cast(size_t*)p = size;
        allocatedMemory += size;
        auto res = emplace!(T, A)(memory, args);
        addObject(res, p, size, T.stringof, file, line);
        return res;
    }

    T* allocate(T, string file = __FILE__, int line = __LINE__, A...) (A args) if (is(T == struct))
    {
        enum size = T.sizeof;
        void* p = malloc(size);
        auto memory = p[0..size];
        *cast(size_t*)p = size;
        allocatedMemory += size;
        auto res = emplace!(T, A)(memory, args);
        addObject(null, p, size, T.stringof, file, line);
        return res;
    }

    T allocate(T, string file = __FILE__, int line = __LINE__) (size_t length) if (isArray!T)
    {
        alias AT = ForeachType!T;
        size_t size = length * AT.sizeof;
        void* p = malloc(size);
        T arr = cast(T)p[0..size];
        foreach(ref v; arr)
            v = v.init;
        *cast(size_t*)p = size;
        allocatedMemory += size;
        addObject(null, p, size, T.stringof, file, line);
        return arr;
    }

    void deallocate(T)(T obj) if(is(T == class) || is(T == interface))
    {
        Object o = cast(Object)obj;
        void* p = cast(void*)o;
        destroy(o); //obj
        if (!freeByPtr(p))
            assert(0, format("Failed to deallocate %s", T.stringof));
    }
    
    void deallocate(T)(T* obj) if (is(T == struct))
    {
        void* p = cast(void*)obj;
        if (!freeByPtr(p))
            assert(0, format("Failed to deallocate %s", T.stringof));
    }
    
    void deallocate(T)(ref T arr) if (isArray!T)
    {
        void* p = cast(void*)arr.ptr;
        if (!freeByPtr(p))
            assert(0, format("Failed to deallocate %s", T.stringof));
        arr.length = 0;
    }
    
    void free()
    {
        MMListItem* item = head;
        while(length)
        {
            length--;
            MMListItem* it = item;
            item = it.next;
            allocatedMemory -= it.size;
            if (it.obj)
                destroy(it.obj);
            .free(it.dataPtr);
            .free(cast(void*)it);
        }
    }
    
    private void addObject(Object obj, void* ptr, size_t size, string name, string file, int line)
    {
        MMListItem* elem;
        
        if (tail is null)
        {
            tail = cast(MMListItem*)malloc(MMListItem.sizeof);
            head = tail;
            elem = tail;
        }
        else
        {
            tail.next = cast(MMListItem*)malloc(MMListItem.sizeof);
            elem = tail.next;
            tail = elem;
        }

        elem.next = null;
        elem.dataPtr = ptr;
        elem.size = size;
        elem.obj = obj;
        elem.typeName = name;
        elem.file = file;
        elem.line = line;
        length++;
    }
    
    private bool freeByPtr(void* p)
    {
        MMListItem* prev = null;
        MMListItem* item = head;
        for (size_t i = 0; i < length; i++)
        {
            MMListItem* it = item;
            item = it.next;
            if (it.dataPtr is p)
            {
                allocatedMemory -= it.size;
                //if (it.obj)
                //    destroy(it.obj);
                .free(p); //it.dataPtr
                if (it is head)
                    head = it.next;
                else
                    prev.next = it.next;
                .free(cast(void*)it);

                length--;
                return true;
            }
            prev = it;
        }
        
        return false;
    }

    int opApply(int delegate(size_t, MMListItem*) dg)
    {
        int result = 0;
        MMListItem* item = head;
        for (size_t i = 0; i < length; i++)
        {
            result = dg(i, item);
            item = item.next;
            if (result)
                break;
        }
        return result;
    }

    void printAllocatedObjects()
    {
        foreach(i, v; this)
        {
            writefln(" %s (%s:%s), %s byte(s)", v.typeName, v.file, v.line, v.size);
        }
    }
}

// Default allocator
private __gshared MemoryManager defaultMM;

T New(T, string file = __FILE__, int line = __LINE__, A...) (A args) if (is(T == class))
{
    return defaultMM.allocate!(T, file, line)(args);
}

T* New(T, string file = __FILE__, int line = __LINE__, A...) (A args) if (is(T == struct))
{
    return defaultMM.allocate!(T, file, line)(args);
}

T New(T, string file = __FILE__, int line = __LINE__) (size_t length) if (isArray!T)
{
    return defaultMM.allocate!(T, file, line)(length);
}

void Delete(T)(T obj) if (is(T == class) || is(T == interface))
{
    defaultMM.deallocate(obj);
}

void Delete(T)(T* obj) if (is(T == struct))
{
    defaultMM.deallocate(obj);
}

void Delete(T)(ref T arr) if (isArray!T)
{
    defaultMM.deallocate(arr);
}

void DeleteAll()
{
    defaultMM.free();
}

size_t allocatedMemory()
{
    return defaultMM.allocatedMemory;
}

void printAllocatedObjects()
{
    defaultMM.printAllocatedObjects();
}

void checkMemoryLeaks()
{
    if (defaultMM.allocatedMemory != 0)
    {
        writeln("Memory leak(s) detected:");
        defaultMM.printAllocatedObjects();
        writeln("Total ", defaultMM.allocatedMemory, " byte(s) allocated");
    }
}

interface Freeable
{
    void free();
}
